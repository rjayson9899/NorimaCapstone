import java.text.NumberFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

/**
 * Norima Capstone Project, Claim Class File.
 * 
 * For the Norima Capstone project, the student is assigned to create a console-based
 * Policy and Claims Administration System based on the specifications provided in the 
 * Robertson Brightspace Java 102 Part 2 course.
 * 
 * This class file contains details consisting a Claim. Class methods are available for generating
 * unique IDs, and for printing formatted details of claim information.
 * 
 * @author Roger Jayson M. Mendez III
 */

public class Claim {

	private final String claimNumber;
	private LocalDate accidentDate;
	private String accidentAddress;
	private String accidentDescription;
	private String accidentDamage;
	private double repairCosts;
	
	/**
	 * Constructor
	 * 
	 * ID to be inputed must be an int and the constructor will automatically
	 * convert the value to its appropriate format.
	 * 
	 * @param claimNumber - unique ID
	 * @param accidentDate - Date accident happened
	 * @param accidentAddress - Location of accident
	 * @param accidentDescription - Description of accident
	 * @param accidentDamage - Damages incurred by accident
	 * @param repairCosts - How much repairs cost
	 */
	public Claim(int claimNumber, LocalDate accidentDate, String accidentAddress, String accidentDescription, String accidentDamage, double repairCosts) {
		this.claimNumber = "C" + String.format("%06d", claimNumber);
		this.accidentDate = accidentDate;
		this.accidentAddress = accidentAddress;
		this.accidentDescription = accidentDescription;
		this.accidentDamage = accidentDamage;
		this.repairCosts = repairCosts;
	}
	
	/**
	 * Returns formatted claim number of current instance
	 * 
	 * @return String - formatted claim number
	 */
	public String getClaimNumber() {
		return claimNumber;
	}
	
	/**
	 * Returns integer component of claim id
	 * 
	 * @return int - claim number integer component
	 */
	public int getIntId() {
		return Integer.parseInt(claimNumber.substring(1));
	}
	
	/**
	 * Class Method.
	 * Generates a unique ID based on Claim instances present in
	 * provided claimList param.
	 * 
	 * Unique ID is generated by checking if the value is taken from 0 to
	 * 999999. If a value is found to be untaken, it will return that value
	 * as the unique ID.
	 * 
	 * If all values are taken, a value of -1 is returned
	 * 
	 * @param claimList
	 * @return
	 */
	public static int generateUniqueId(List<Claim> claimList) {
		int limit = 999999;
		ArrayList<Integer> idList = new ArrayList<Integer>();
		
		for (Claim i: claimList) {
			idList.add(Integer.valueOf(i.getIntId()));
		}
		
		
		for (int i = 0; i <= limit; i++) {
			if (!(idList.contains(Integer.valueOf(i)))) {
				return i;
			}
		}
		
		return -1;
	}
	
	/**
	 * Class Method
	 * Generates a formatted header for printing Claim information.
	 * Output is generated directly to console.
	 */
	public static void printClaimHeader() {
		System.out.printf("\n%-20s\t%-20s\t%-20s\t%-20s\t%-20s\t%20s\n", "Claim Number", "Accident Date", "Accident Address", "Accident Description", "Damage Description", "Repair Costs");
	}
	
	/**
	 * Class Method
	 * Generates a formatted one line string of information related to current instance.
	 * Output is generated directly to console.
	 */
	public void printClaimDetails() {
		NumberFormat money = NumberFormat.getCurrencyInstance(Locale.US);
		String repairCostsString;
		repairCostsString = money.format(this.repairCosts);
		System.out.printf("%-20s\t%-20s\t%-20s\t%-20s\t%-20s\t%20s\n", this.claimNumber, this.accidentDate, this.accidentAddress, this.accidentDescription, this.accidentDamage, repairCostsString);
	}
	
}
