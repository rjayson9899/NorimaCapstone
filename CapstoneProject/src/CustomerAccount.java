import java.text.NumberFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

/**
 * Norima Capstone Project, CustomerAccount Class File.
 * 
 * For the Norima Capstone project, the student is assigned to create a console-based
 * Policy and Claims Administration System based on the specifications provided in the 
 * Robertson Brightspace Java 102 Part 2 course.
 * 
 * This class file contains details consisting a Customer Account. This class also provides
 * class methods which aid in the instantiation of itself, and ways to print its own details 
 * along with the details of other objects it holds such as Policies and Policy Holders.
 * 
 * @author Roger Jayson M. Mendez III
 */

public class CustomerAccount {
	private final int accountNumber;
	private String firstName;
	private String lastName;
	private String address;
	private ArrayList<Policy> policyList = new ArrayList<Policy>();
	private ArrayList<PolicyHolder> policyHolderList = new ArrayList<PolicyHolder>();
	
	/**
	 * Constructor
	 * 
	 * @param accountNumber - unique ID
	 * @param firstName - first name of customer
	 * @param lastName - last name of customer
	 * @param address - address of customer
	 */
	public CustomerAccount(int accountNumber, String firstName, String lastName, String address) {
		this.accountNumber = accountNumber;
		this.firstName = firstName;
		this.lastName = lastName;
		this.address = address;
	}
	
	/**
	 * Returns account number of current instance
	 * 
	 * @return int - account number
	 */
	public int getAccountNumber() {
		return accountNumber;
	}
	
	/**
	 * Returns first name of current instance
	 * 
	 * @return String - first name
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * Returns last name of current instance
	 * 
	 * @return String - first last
	 */
	public String getLastName() {
		return lastName;
	}
	
	/**
	 * Returns the policy containing the id matching the parameter.
	 * Throws an exception if a policy matching the ID is not found.
	 * 
	 * Use this function only after confirming if CustomerAccount instance
	 * has a matching policy. Method hasPolicy() can confirm if instance has
	 * a Policy matching input ID.
	 * 
	 * @param id - policy ID to match
	 * @return Policy - Policy instance with policy ID matching param
	 * @throws IllegalArgumentException - if instance does not contain policy with matching id
	 */
	public Policy getPolicyMatchingId(int id) throws IllegalArgumentException {
		for (Policy polObj: policyList) {
			if (polObj.getPolicyNumber() == id) {
				return polObj;
			}
		}
		
		throw new IllegalArgumentException("No Policy found with matching ID");
	}
	
	/**
	 * Links a Policy to the CustomerAccount instance
	 * 
	 * @param polObj - Policy instance to add
	 */
	public void addPolicy(Policy polObj) {
		this.policyList.add(polObj);
		this.policyHolderList.add(polObj.getHolder());
	}
	
	/**
	 * Checks if instance has Policy matching ID param.
	 * 
	 * @param policyId - id of Policy to find match with for this instance
	 * @return boolean - true if instance has matching Policy, false otherwise
	 */
	public boolean hasPolicy(int policyId) {
		for (Policy polObj: policyList) {
			if (polObj.getPolicyNumber() == policyId) {
				return true;
			}
		}
		
		return false;
	}
	
	/**
	 * Cancels a Policy matching provided ID param.
	 * Returns a boolean value to denote if policy was canceled or not.
	 * Throws an exception if no matching policy is found.
	 * 
	 * Use this function only after confirming if CustomerAccount instance
	 * has a matching policy. Method hasPolicy() can confirm if instance has
	 * a Policy matching input ID.
	 * 
	 * @param policyId - Policy to cancel
	 * @return boolean - true if policy is cancelled, false if policy is already expired
	 * @throws IllegalArgumentException
	 */
	public boolean cancelAccountPolicy(int policyId) throws IllegalArgumentException {
		for (Policy polObj: policyList) {
			if (polObj.getPolicyNumber() == policyId) {
				if (polObj.isExpired()) {
					return false;
				}
				else {
					polObj.cancelPolicy();
					return true;
				}
			}
		}
		
		throw new IllegalArgumentException("No Policy found with matching ID");
	}
	
	/**
	 * Directly adds all Policy IDs current instance has to idList param
	 * 
	 * @param idList - Integer list to add Policy ID values
	 */
	public void addPolicyIds(List<Integer> idList) {
		for (Policy polObj: policyList) {
			idList.add(Integer.valueOf(polObj.getPolicyNumber()));
		}
	}
	
	/**
	 * Class Method.
	 * Generates a unique ID based on CustomerAccount instances present in
	 * provided customerList param.
	 * 
	 * Unique ID is generated by checking if the value is taken from 1 to
	 * 9999. If a value is found to be untaken, it will return that value
	 * as the unique ID.
	 * 
	 * If all values are taken, a value of -1 is returned
	 * 
	 * @param customerList - list of customers
	 * @return int - unique ID if a vacancy is found
	 *             - -1 if no vacancy is found
	 */
	public static int generateUniqueId(List<CustomerAccount> customerList) {
		int limit = 9999;
		ArrayList<Integer> idList = new ArrayList<Integer>();
		
		for (CustomerAccount i: customerList) {
			idList.add(Integer.valueOf(i.getAccountNumber()));
		}
		
		
		for (int i = 1; i <= limit; i++) {
			if (!(idList.contains(Integer.valueOf(i)))) {
				return i;
			}
		}
		
		return -1;
	}
	
	/**
	 * Class Method.
	 * Generates a formatted header for printing Customer Account information.
	 * Output is generated directly to console.
	 */
	public static void printCustomerAccountHeader() {
		System.out.printf("\n%-20s\t%-20s\t%-20s\t%-20s\n", "Account Number", "First Name", "Last Name", "Address");
	}
	
	/**
	 * Generates a formatted one line string of information related to current instance.
	 * Output is generated directly to console.
	 */
	public void printCustomerAccountDetails() {
		String accountNumberString = String.format("%04d", this.accountNumber);
		System.out.printf("%-20s\t%-20s\t%-20s\t%-20s\n", accountNumberString, this.firstName, this.lastName, this.address);
	}
	
	/**
	 * Class Method.
	 * Generates a formatted header for printing Policy information.
	 * Output is generated directly to console.
	 */
	public static void printPolicyHeader() {
		System.out.printf("\n%-20s\t%-20s\t%-20s\t%-20s\t%20s\t%20s\t%20s\n", "Policy Number", "Effective Date", "Expiration Date", "Policy Holder Name", "Premium", "Expired?", "In Force?");
	}
	
	/**
	 * Generates multiple formatted one line string of information related to all Policies in current instance.
	 * Output is generated directly to console.
	 */
	public void printPolicies() {
		NumberFormat money = NumberFormat.getCurrencyInstance(Locale.US);
		String policyIdString, premiumString;
		
		for (Policy polObj: policyList) {
			policyIdString = String.format("%06d", polObj.getPolicyNumber());
			premiumString = money.format(polObj.getPremium());
			System.out.printf("%-20s\t%-20s\t%-20s\t%-20s\t%20s\t%20s\t%20s\n", policyIdString, polObj.getEffectiveDate(), polObj.getExpirationDate(), polObj.getHolderName(), premiumString, polObj.isExpired(), polObj.isInForce());
		}
	}
	
	/**
	 * Generates a formatted one line string of information related to a particular Policy.
	 * Policy details will only print if id param matches Policy ID in current instance.
	 * Output is generated directly to console.
	 * 
	 * @param id - ID of particular Policy to print
	 */
	public void printPolicyMatchingId(int id) {
		NumberFormat money = NumberFormat.getCurrencyInstance(Locale.US);
		String policyIdString, premiumString;
		
		for (Policy polObj: policyList) {
			if (polObj.getPolicyNumber() == id) {
				policyIdString = String.format("%06d", polObj.getPolicyNumber());
				premiumString = money.format(polObj.getPremium());
				System.out.printf("%-20s\t%-20s\t%-20s\t%-20s\t%20s\t%20s\t%20s\n", policyIdString, polObj.getEffectiveDate(), polObj.getExpirationDate(), polObj.getHolderName(), premiumString, polObj.isExpired(), polObj.isInForce());
				}
		}
	}
	
	/**
	 * Class Method.
	 * Generates a formatted header for printing Vehicle information.
	 * Output is generated directly to console.
	 */
	public static void printVehicleHeader() {
		System.out.printf("\n%-20s\t%-20s\t%-20s\t%-20s\t%-20s\t%-20s\t%20s\t%20s\n", "Policy Number", "Make", "Model", "Year", "Type", "Fuel Type", "Purchase Price", "Premium");
	}
	
	/**
	 * Generates multiple formatted one line string of information related to all Vehicles in 
	 * all Policy instances held by current CustomerAccount instance.
	 * Output is generated directly to console.
	 */
	public void printVehicles() {
		NumberFormat money = NumberFormat.getCurrencyInstance(Locale.US);
		String policyNumberString;
		
		for (Policy polObj: policyList) {
			for (Vehicle vhcObj: polObj.getVehicleList()) {
				policyNumberString = String.format("%06d", polObj.getPolicyNumber());
				System.out.printf("%-20s\t%-20s\t%-20s\t%-20s\t%-20s\t%-20s\t%20s\t%20s\n", policyNumberString, vhcObj.getMake(), vhcObj.getModel(), vhcObj.getYear(), vhcObj.getType(), vhcObj.getFuelType(), money.format(vhcObj.getPurchasePrice()), money.format(vhcObj.getPremium()));
			}
		}
	}
	
	/**
	 * Class Method.
	 * Generates a formatted header for printing Policy Holder information.
	 * Output is generated directly to console.
	 */
	public static void printPolicyHolderHeader() {
		System.out.printf("\n%-20s\t%-20s\t%-20s\t%-20s\t%-20s\n", "First Name", "Last Name", "Birth Date", "License Number", "License Date");
	}
	
	/**
	 * Generates multiple formatted one line string of information related to all Policy Holders in current instance.
	 * Output is generated directly to console.
	 */
	public void printPolicyHolders() {
		for (PolicyHolder hldrObj: policyHolderList) {
			System.out.printf("%-20s\t%-20s\t%-20s\t%-20s\t%-20s\n", hldrObj.getFirstName(), hldrObj.getLastName(), hldrObj.getBirthDate(), hldrObj.getDriverLicenseNumber(), hldrObj.getLicenseDate());
		}
	}
	
}
